@page
@model Laparoscope.Pages.Admin.IndexModel;
@{
    ViewBag.Title = "Application Configuration";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}


<h3>Application Configuration</h3>
<div class="accordion">
    <div class="card" id="globals">
        <div class="card-header" id="headingOne">
            <h4>
                <a class="btn btn-link collapsed" href="#globals" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                    Application Globals
                </a>
            </h4>
        </div>
        <div id="collapseOne" class="collapse" aria-labelledby="headingOne">
            <div class="card-body">
                <table class="table table-striped">
                    <thead class="">
                        <tr>
                            <th>Property</th>
                            <th>Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        @* @foreach (var p in Model.GlobalProps)
                        {
                            <tr>
                                <td>@p.Name</td>
                                <td>@( SMM.Helper.Extensions.Like(p.Name, "*Secret*") ? "**************" : p.GetValue(null, null) )</td>
                            </tr>
                        } *@
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="card" id="globals">
        <div class="card-header" id="headingSettings">
            <h4>
                <a class="btn btn-link collapsed" href="#globals" data-toggle="collapse" data-target="#collapseSettings" aria-expanded="true" aria-controls="collapseSettings">
                    Application Settings
                </a>
            </h4>
        </div>
        <div id="collapseSettings" class="collapse" aria-labelledby="headingSettings">
            <div class="card-body">
                <table class="table table-striped">
                    <thead class="">
                        <tr>
                            <th>Property</th>
                            <th>Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        @* @foreach (var k in ViewBag.SettingKeys)
                        {
                            <tr>
                                <td>@k</td>
                                <td>@( SMM.Helper.Extensions.Like(k, "*Secret*") ? "**************" : ViewBag.AppSettings[k] )</td>
                            </tr>
                        } *@
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="card" id="rbac-rules">
        <div class="card-header" id="headingTwo">
            <h4>
                <a class="btn btn-link" href="#rbac-rules" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="true" aria-controls="collapseTwo">
                    Authorization Rules
                </a>
            </h4>
        </div>
        <div id="collapseTwo" class="collapse show" aria-labelledby="headingTwo">
            <div class="card-body">

                <div class="container container-lg">
                    <div class="row">
                        <div class="col">Id</div>
                        <div class="col-9"><input id="in-id" oninput="triggerDelay()" /></div>
                    </div>
                    <div class="row">
                        <div class="col">Role</div>
                        <div class="col-9"><input id="in-role" oninput="triggerDelay()" /></div>
                    </div>
                    <div class="row">
                        <div class="col">Context</div>
                        <div class="col-9"><input id="in-controller" oninput="triggerDelay()" /></div>
                    </div>
                    <div class="row">
                        <div class="col">Claim Property</div>
                        <div class="col-9"><input id="in-claimprop" oninput="triggerDelay()" /></div>
                    </div>
                    <div class="row">
                        <div class="col">Claim Value</div>
                        <div class="col-9"><input id="in-claimvalue" oninput="triggerDelay()" /></div>
                    </div>
                    <div class="row">
                        <div class="col">Model Property</div>
                        <div class="col-9"><input id="in-property" oninput="triggerDelay()" /></div>
                    </div>
                    <div class="row">
                        <div class="col">Value</div>
                        <div class="col-9"><input id="in-value" oninput="triggerDelay()" /></div>
                    </div>
                    <div class="row">
                        <div class="col">Values</div>
                        <div class="col-9"><input id="in-values" oninput="triggerDelay()" /></div>
                    </div>
                    <div class="row">
                        <div class="col col-md-auto">Rule</div>
                        <textarea class="col col-8-auto" id="rule-string"></textarea>
                    </div>
                    <div class="row align-content-lg-start">
                        
                        <div class="col">
                            <button type="button" class="btn btn-secondary" onclick="copyRule()" style="margin-top: 2px; margin-left: 1em;">Copy</button>
                            <button type="button" class="btn btn-secondary" onclick="populateFields()" style="margin-top: 2px;">Load</button>
                        </div>
                    </div>
                </div>
                <div class="container container-lg">
                    <h4>Configured Rules</h4>
                    <table class="table table-striped">
                        <thead class="">
                            <tr>
                                <th>Role</th>
                                <th>Context</th>
                                <th>ClaimProperty</th>
                                <th>ClaimValue</th>
                                <th>ModelProperty</th>
                                <th>ModelValue</th>
                                <th>ModelValues</th>
                                <th>LoadedFrom</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var r in Model.AuthorizationRules)
                            {
                                <tr>
                                    <td>@r.Role</td>
                                    <td>@r.Context</td>
                                    <td>@r.ClaimProperty</td>
                                    <td>@r.ClaimValue</td>
                                    <td>@r.ModelProperty</td>
                                    <td>@r.ModelValue</td>
                                    <td>@{if (r.ModelValues != null) { String.Join(", ", r.ModelValues); } }</td>
                                    <td>@r.LoadedFrom</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    'use strict';

    function uuidv4() {
        return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
            (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
        );
    }

    // This is to add a 1/4 second buffer to the input fields so
    // rule computation isn't just spinning all the time. Helps
    // with UI responsiveness and only adds 5 lines.
    var delay;
    function triggerDelay() {
        clearTimeout(delay);
        delay = setTimeout(function() { makeRuleString(); }, 250);
    }

    function makeRuleString() {
        var inid          = document.getElementById('in-id').value;
        var inrole        = document.getElementById('in-role').value;
        var incontroller  = document.getElementById('in-controller').value;
        var inclaimprop   = document.getElementById('in-claimprop').value;
        var inclaimpvalue = document.getElementById('in-claimvalue').value;
        var inproperty    = document.getElementById('in-property').value;
        var invalue       = document.getElementById('in-value').value;
        var invalues      = document.getElementById('in-values').value.split(',');

        var rule = {
            'Id': inid ? inid : uuidv4().toString(),
            'Role': inrole ? inrole : null,
            'Context': incontroller ? incontroller : null,
            'ClaimProperty': inclaimprop ? inclaimprop : null,
            'ClaimValue': inclaimpvalue ? inclaimpvalue : null,
            'ModelProperty': inproperty ? inproperty : null,
            'ModelValue': invalue ? invalue : null,
            'ModelValues': null
        }

        // Add rule values that were split out from invalues. If none, leave null;
        for (var i in invalues) {
            if (i && !(invalues[i].trim() == "")) {
                if (!rule.ModelValues || rule.ModelValues[0] === "") {
                    rule["ModelValues"] = [];
                }
                rule.ModelValues.push(invalues[i].trim());
            }
        }

        var ruleString = document.getElementById('rule-string');
        ruleString.value = JSON.stringify(rule);
    }


    function populateFields() {
        var rule = null;

        var ruleString = document.getElementById('rule-string');
        try {
            rule = JSON.parse(ruleString.value.trim());

            document.getElementById('in-id').value = rule.Id;
            document.getElementById('in-role').value = rule.Role;
            document.getElementById('in-controller').value = rule.Context;
            document.getElementById('in-claimprop').value = rule.ClaimProperty;
            document.getElementById('in-claimvalue').value = rule.ClaimValue;
            document.getElementById('in-property').value = rule.ModelProperty;
            document.getElementById('in-value').value = rule.ModelValue;
            document.getElementById('in-values').value = rule.ModelValues ? rule.ModelValues.join(', ') : null;


            // Add rule values that were split out from invalues. If none, leave null;
            /*
            for (i in invalues) {
                if (i && !(invalues[i].trim() == "")) {
                    if (!rule.ModelValues || rule.ModelValues[0] === "") {
                        rule["ModelValues"] = [];
                    }
                    rule.ModelValues.push(invalues[i].trim());
                }
            }
            */
        }
        catch {
            console.log("Could not parse string: " + ruleString.innerText);
        }
    }


    function copyRule() {
        var ruleString = document.getElementById('rule-string');
        navigator.clipboard.writeText(ruleString.value);
    }

    // Make content full width since it's displaying settings that may be wider than the viewport
    // var parent = document.getElementById('renderBody');
    // parent.classList.remove('container')
    // parent.classList.remove('container-fluid')
</script>