@*// ------------- Server Connector Component ------------- //*@
<script type="text/x-template" id="server-connector-template">
    <div>
        <div class="d-flex flex-row" style="padding-top:0.5em">
            <ul id="configTab" class="nav nav-tabs" role="tablist">
                <!-- Connector Config -->
                <li class="nav-item active">
                    <a class="nav-link" :id="'tab-config-' + connector.Identifier" data-toggle="tab"
                       :href="'#connectorConfig-' + connector.Identifier" role="tab"
                       aria-controls="Connector Config" aria-selected="true">
                        Connector Config
                    </a>
                </li>

                <!-- CSObject Lookup - Only shown for AD connectors -->
                <li class="nav-item" v-if="connector.Type == 'AD'">
                    <a class="nav-link" :id="'tab-conn-csobject-lookup-' + connector.Identifier" data-toggle="tab"
                       :href="'#csObjectLookup' + connector.Identifier" role="tab"
                       aria-controls="C S Object Lookup" aria-selected="true">
                        CSObject Lookup
                    </a>
                </li>

                <!-- Hash Sync Status - Only shown for AD connectors -->
                <li class="nav-item" v-if="connector.Type == 'AD'">
                    <a class="nav-link" :id="'tab-conn-hash-sync-' + connector.Identifier" data-toggle="tab"
                       :href="'#hash-sync-' + connector.Identifier" role="tab"
                       aria-controls="Connector Hash Sync Status" aria-selected="true">
                        Hash Sync
                    </a>
                </li>
            </ul>
        </div>

        <div class="tab-content d-flex flex-row">
            <!-- Connector Config Content -->
            <div :id="'connectorConfig-' + connector.Identifier" class="tab-pane flex-fill active">
                <table class="table table-responsive-sm">
                    <thead>
                        <tr><td><strong>{{connector.Name}}</strong></td><td></td></tr>
                    </thead>
                    <tbody>
                        <!-- 
                            Enumerate the connector attributes and conditionally
                            format some values as a list. AttributeInclusionList for
                            instance can be huge and doesn't make sense to show by default
                            so it is rendered as a collapsed accordion element.
                        -->
                        <tr v-for="(value, key, i) in connector">
                            <td>{{ key }}</td>
                            <td v-if="key == 'AttributeInclusionList'">
                                <div :id="'accordion' + key">
                                    <div class="card">
                                        <div class="card-header" :id="'heading' + key">
                                            <h5 class="mb-0">
                                                <button class="btn btn-link" data-toggle="collapse" :data-target="'#collapse' + key" aria-expanded="false" :aria-controls="'collapse' + key">
                                                    Selected Attributes {{value.length}}
                                                </button>
                                            </h5>
                                        </div>

                                        <div :id="'collapse' + key" class="collapse" :aria-labelledby="'heading' + key" :data-parent="'#accordion' + key">
                                            <div class="card-body">
                                                <ul class="no-bullets">
                                                    <li v-for="(entry) in value.sort()">{{entry}}</li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </td>
                            <!-- 
                                Show ObjectInclusionList as an unsorted list. 
                                Should only have a few values so it's not collapsed.
                            -->
                            <td v-else-if="key == 'ObjectInclusionList'">
                                <ul class="no-bullets">
                                    <li v-for="(entry) in value.sort()">{{entry}}</li>
                                </ul>
                            </td>
                            <!--
                                Partitions offer some reasonable complex information about the
                                connector's configuration so it's rendered as a nested object table.
                            -->
                            <td v-else-if="key == 'Partitions'">
                                <object-table :record="value" :expand="['ConnectorPartitionScope']" :list="['ObjectClasses','ContainerInclusionList','ContainerExclusionList']"></object-table>
                            </td>
                            <!--
                                AnchorConstructionSettings show a list of anchor attributes by object
                                type so render best as a wide object table, think of it like Format-Table
                                in PowerShell.
                            -->
                            <td v-else-if="key == 'AnchorConstructionSettings'">
                                <wide-object-table :record="value" :header="['ObjectType','Attributes','Locked']"></wide-object-table>
                            </td>
                            <td v-else-if="key == 'ConnectivityParameters'">
                                <object-table :record="value"></object-table>
                            </td>
                            <td v-else>{{ value }}</td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <!-- CSObject Lookup Content -->
            <div :id="'csObjectLookup' + connector.Identifier" class="tab-pane flex-fill" v-if="connector.Type == 'AD'">
                <csobject-lookup :thisConnector="connector"></csobject-lookup>
            </div>

            <!-- Connector Hash Sync Status Content -->
            <div :id="'hash-sync-' + connector.Identifier" class="tab-pane flex-fill" v-if="connector.Type == 'AD'">
                <object-table record="{'foo'='bar'}"></object-table>
            </div>

        </div>
    </div>
</script>

<script type="text/javascript">
    Vue.component('server-connector', {
        template: '#server-connector-template',
        props: ['connector', 'hash-sync'],
        data() {
            return {
            }
        }
    });
</script>


@*// ------------- Object Table Component ------------- //*@
<script type="text/x-template" id="object-table-template">
    <div>
        <table class="table table-responsive-sm">
            <thead v-if="title">
                <tr><td><strong>{{ title }}</strong></td><td></td></tr>
            </thead>
            <tbody>
                <tr v-for="(value, key, i) in record">
                    <td>{{ key }}</td>
                    <td v-if="expand && expand.includes(key)">
                        <object-table :record="value" :list="list"></object-table>
                    </td>
                    <td v-else-if="list && list.includes(key)">
                        <ul class="no-bullets">
                            <li v-for="(entry) in value.sort()">{{entry}}</li>
                        </ul>
                    </td>
                    <td v-else>{{ value }}</td>
                </tr>
            </tbody>
        </table>
    </div>
</script>

<script type="text/javascript">
    Vue.component('object-table', {
        template: '#object-table-template',
        props: ['record', 'title', 'expand', 'list'],
        methods: {

        },
        data() {
            return {
            }
        }
    });
</script>

@*// ------------- Object Table Component ------------- //*@
<script type="text/x-template" id="accordion-object-table-template">
    <div>
        <table class="table table-responsive-sm">
            <thead v-if="title">
                <tr><td><strong>{{ title }}</strong></td><td></td></tr>
            </thead>
            <tbody>
                <tr v-for="(value, key, i) in record">
                    <td>{{ key }}</td>
                    <td v-if="expand && expand.includes(key)">
                        <object-table :record="value" :list="list"></object-table>
                    </td>
                    <td v-else-if="list && list.includes(key)">
                        <ul class="no-bullets">
                            <li v-for="(entry) in value.sort()">{{entry}}</li>
                        </ul>
                    </td>
                    <td v-else-if="key && accordion && accordion.includes(key)">
                        <div :id="'accordion' + key + seed">
                            <div class="card">
                                <div class="card-header" :id="'heading' + key + seed">
                                    <h5 class="mb-0">
                                        <button class="btn btn-link" data-toggle="collapse" :data-target="'#collapse' + key" aria-expanded="false" :aria-controls="'collapse' + key + seed">
                                            {{value.length}} Values
                                        </button>
                                    </h5>
                                </div>

                                <div :id="'collapse' + key + seed" class="collapse" :aria-labelledby="'heading' + key" :data-parent="'#accordion' + key + seed">
                                    <div class="card-body">
                                        <ul class="no-bullets">
                                            <li v-for="(entry) in value.sort()">{{entry}}</li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </td>
                    <td v-else>{{ value }}</td>
                </tr>
            </tbody>
        </table>
    </div>
</script>

<script type="text/javascript">
    Vue.component('accordion-object-table', {
        template: '#object-table-template',
        props: ['record', 'title', 'expand', 'list', 'accordion', 'seed'],
        methods: {

        },
        data() {
            return {
            }
        }
    });
</script>


@*// ------------- Wide Object Table Component ------------- //*@
<script type="text/x-template" id="wide-object-table-template">
    <div>
        <table class="table table-responsive-sm">
            <thead>
                <tr v-if="header"><th v-for="(objKey, key, i) in header">{{objKey}}</th></tr>
            </thead>
            <tbody>
                <tr v-for="(value, key, i) in record"><td v-for="(h, key, i) in header"> {{ value[h] }} </td></tr>
            </tbody>
        </table>
    </div>
</script>

<script type="text/javascript">
    Vue.component('wide-object-table', {
        template: '#wide-object-table-template',
        props: ['record', 'title', 'header'],
        data() {
            return {

            }
        }
    });
</script>



<!--
    This can be used to look up a user/group/computer connector space record
    provided you have rights to the connector and know the object's distinguished
    name. If you do not have rights to the connector it should return unauthorized.
    That said, it should also have never shown that connector in the UI.

    The authorization rules for /api/Connector and /api/CSObject, /api/MVObject are
    separate rules that key off different properties on the results. Connectors
    are generally keyed on the Name property, where CSObjects would be by ConnectorName.
    An authorization rule whose Context=*Name would match both and should work for this.
    MVObjects are available to any users who are authenticated since records can
    only be resolved by GUID and those aren't easily guessable values. This isn't
    satisfying from an infosec standpoint but only specific people should have access
    to this API so it's a compromise worth making right now.
-->
@*// ------------- Sync Object Table Component ------------- //*@
<script type="text/x-template" id="syncobject-table-template">
    <div>
        <table class="table table-responsive-sm">
            <thead v-if="title">
                <tr><td><strong>{{ title }}</strong></td><td></td></tr>
            </thead>
            <tbody>
                <tr v-for="(value, key, i) in record">
                    <td v-if="key && (!skip || !skip.includes(key))">{{ key }}</td>

                    <!-- Lineage for MVObject Reference -->
                    <td v-if="key && key == 'Lineage' && mvobject">
                        <wide-object-table :record="value" :header="['ConnectorName','ConnectedCsObjectDN']"></wide-object-table>
                    </td>

                    <!-- Lineage for CSObject Reference -->
                    <td v-else-if="key && key == 'Lineage' && !mvobject">
                        <wide-object-table :record="value" :header="['SyncRuleName','Operation']"></wide-object-table>
                    </td>

                    <td v-else-if="expand && expand.includes(key)">
                        <object-table :record="value" :list="list"></object-table>
                    </td>
                    <td v-else-if="list && list.includes(key)">
                        <ul class="no-bullets">
                            <li v-for="(entry) in value.sort()">{{entry}}</li>
                        </ul>
                    </td>
                    <td v-else-if="key && accordion.includes(key)">
                        <div :id="'accordion' + key + seed">
                            <div class="card">
                                <div class="card-header" :id="'heading' + key">
                                    <h5 class="mb-0">
                                        <button class="btn btn-link" data-toggle="collapse" :data-target="'#collapse' + key + seed" aria-expanded="false" :aria-controls="'collapse' + key + seed">
                                            {{value.length}} Values
                                        </button>
                                    </h5>
                                </div>

                                <div :id="'collapse' + key + seed" class="collapse" :aria-labelledby="'heading' + key" :data-parent="'#accordion' + key + seed">
                                    <div class="card-body">
                                        <wide-object-table v-if="(mvobject)" :record="value" :header="['Name','Values', 'ConnectorName']"></wide-object-table>
                                        <wide-object-table v-else :record="value" :header="['Name','Values']"></wide-object-table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </td>
                    <td v-else-if="key && skip && skip.includes(key)"></td>

                    <td v-else>{{ value }}</td>
                </tr>
            </tbody>
        </table>
    </div>
</script>

<script type="text/javascript">
    Vue.component('syncobject-table', {
        template: '#syncobject-table-template',
        props: ['record', 'title', 'expand', 'seed', 'list', 'skip', 'accordion', 'mvobject'],
        data() {
            return {
            }
        }
    });
</script>


@*// ------------- CSObject Lookup Component ------------- //*@
<script type="text/x-template" id="csobject-lookup-template">
    <div class="flex-column">
        <p>{{ thisConnector.Name }}</p>

        @*<input type="text"
            placeholder="DN of your record"
            pattern="^(?<RDN>(?<Key>(?:\\[0-9A-Fa-f]{2}|\\\[^=\,\\]|[^=\,\\]+)+)\=(?<Value>(?:\\[0-9A-Fa-f]{2}|\\\[^=\,\\]|[^=\,\\]+)+))(?:\s*\,\s*(?<RDN>(?<Key>(?:\\[0-9A-Fa-f]{2}|\\\[^=\,\\]|[^=\,\\]+)+)\=(?<Value>(?:\\[0-9A-Fa-f]{2}|\\\[^=\,\\]|[^=\,\\]+)+)))*$"
            v-model="dn" />*@
        <input class="flex-row col-md-8"
               type="text"
               placeholder="DN of your record"
               v-model="dn" />

        <button type="button"
                class="btn btn-outline-primary flex-row"
                v-on:click="resolveCsObjectToMv">
            Lookup
        </button>

        <syncobject-table class="flex-row"
                        v-for="(c) in cs"
                        :record="c"
                        :seed="getRandomInt(0,100).toString()"
                        :accordion="['Attributes']"></syncobject-table>

        <syncobject-table class="flex-row"
                        title="Metaverse Object"
                        :record="mv"
                        :seed="getRandomInt(0,100).toString()"
                        :accordion="['Attributes']"
                        mvobject="true"></syncobject-table>
    </div>
</script>

<script type="text/javascript">
    Vue.component('csobject-lookup', {
        template: '#csobject-lookup-template',
        props: ['thisConnector', 'distinguishedName'],
        methods: {
            resolveCsObjectToMv() {

                // Lookup connector space (CS) record by distinguished name.
                // This would be the user, group or computer object that is synced from
                // Active Directory. There is no method for searching, it has to be DN.
                var csuri = this.apiCSObject + this.dn;
                $.getJSON(csuri, json => {
                    // If resolved, set things up.
                    if (json) {
                        this.cs = json;
                        console.log("cs lookup done");
                    }
                }).then(() => {
                    // If the CS object was retrieved and it has a ConectedMVObjectId, look up
                    // the metaverse record that is connected to it. This can be used to
                    // troubleshoot issues where a user isn't syncing to the cloud correctly
                    // as the metaverse record will show if it is also projected to the
                    // AAD connector space.
                    if (this.cs) {
                        for (i in this.cs) {
                            console.log(i);
                            let cs = this.cs[i];
                            if (cs.ConnectedMVObjectId) {
                                var mvuri = this.apiMVObject + cs.ConnectedMVObjectId;
                                $.getJSON(mvuri, json => {
                                    this.mv = json[0];
                                    console.log("mv lookup done");
                                });
                            }
                        }
                    }
                });

            },
            getRandomInt(min, max) {
                min = Math.ceil(min);
                max = Math.floor(max);
                return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive
            }
        },
        data: function () {
            return {
                apiCSObject: "/api/CSObject?ConnectorName=" + this.thisConnector.Name + "&DistinguishedName=",
                apiMVObject: "/api/MVObject/",
                dn: '',
                cs: [],
                mv: {}
            }
        }
    });
</script>